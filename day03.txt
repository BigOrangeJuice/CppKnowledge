C++_day03
2021/10/25

1.const修饰成员函数

	* 常函数

		―― 定义：通过const修饰的成员函数

		―― 作用

			* 常函数内可以调用，但不能修改成员属性的数据【通过mutable修饰的属性可被修改】

		―― 实质：给成员函数加以const修饰实则是通过const修饰了this指针，使this既不可修改指向也不可修改数值【即成员属性的数据不可修改】

	* 常对象

		―― 定义：创建对象时通过const修饰

		―― 注意

			* 常对象只能调用常函数和可变属性

			* 另外，由于是const修饰的对象，根据【const修饰的变量必须初始化的问题】，对象也应该对应初始化

2.友元

	* 全局函数做友元

		―― 基本语法：friend 数据类型 函数名();【相当于在类内通过friend声明全局函数】

		―― 位置：建议在类内开头【代码清晰，无硬性要求】

		―― 作用：该全局函数成为对应类的好朋友，可以访问类中的私有权限下的成员

	* 类做友元

		―― 基本语法：friend class 类名;

		―― 位置：建议在类内开头【代码清晰，无硬性要求】

		―― 作用：类A中用friend声明类B，B成为A的好朋友，B可以访问A中的私有成员【但A不能访问B中的私有成员，需要互相friend声明才可互相访问】

		―― 实践：假定A,B两类，B中有一函数中形参为A类型，此时的形参虽然是A类型但不能访问A中的私有成员，需要在A中friend声明B【另外，使用类最好自己写一个构造函数，否则可能报错，使用了未初始化的对象】

	* 成员函数做友元

		―― 基本语法：friend 数据类型 对应类名::函数名();

		―― 位置：建议在类内开头【代码清晰，无硬性要求】
	
3.类外定义成员函数【类内应提前声明】

	* 基本语法：数据类型 类名::函数名(){}

4.运算符重载【作用：适用于不同的数据类型】【为了类的封装安全性，可与友元搭配使用】

	* 加号运算符重载(+)

		―― 作用：实现两个自定义类型的直接相加

		―― 定义基本语法

			* 成员函数中：类名 operator+(类名 &形参名){类名 temp;temp.属性 = this->属性 + 形参.属性;return temp;}

			* 全局函数中：类名 operator+(类名 &形参名1,类名 &形参名2){类名 temp;temp.属性 = 形参1.属性 + 形参2.属性;return temp;}

		―― 调用基本语法：对象3 = 对象1 + 对象2 ;【即实现了两个自定义类型的直接相加】

		―― 函数重载

			* 定义基本语法

				―― 成员函数中：类名 operator+(基本数据类型 形参名){类名 temp;temp.属性 = this->属性 + 形参;return temp;}

				―― 全局函数中：类名 operator+(类名 &形参名1,基本数据类型 形参名){类名 temp;temp.属性 = 形参1.属性 + 形参;return temp;}

			* 调用基本语法：对象2 = 对象1 + 数据 ;

	* 左移运算符重载(<<)

		―― 作用：实现自定义类型的直接输出

		―― 定义基本语法

			* 全局函数中：ostream &operator<<(ostream &cout,类名 &形参名){cout<<形参.属性;return cout;}

		―― 调用基本语法：cout << 类 << endl ;【要以endl结尾换行就必须有返回值】

	* 递增运算符重载(++)

		―― 作用：实现自定义类型的直接递增

		―― 定义基本语法【成员函数】

			* 前置递增：类名 &operator++(){属性++;return *this;}

			* 后置递增：类名 operator++(int){类名 temp = *this;属性++;return temp;}

			* 注意：前置递增返回引用，后置递增返回副本

		―― 调用基本语法

			* 前置递增：++类名 ;

			* 后置递增：类名++ ;

	* 赋值运算符重载(=)【会跟析构函数中的内存释放有联系】

		―― 作用：解决编译器浅拷贝的缺点，避免堆区内存重复释放

		―― 定义基本语法【成员函数】：类名 &operator=(类名 形参名){if(指针属性 != NULL){delete 指针属性;指针属性 = NULL;}指针属性 = new 属性类型(*形参.指针属性);return *this;}

		―― 调用基本语法：类1 = 类2 ;

	* 关系运算符重载(==、!=)

		―― 作用：可以直接进行两个对象的比较操作

		―― 定义基本语法：bool operator==(类名 &形参名){if(this->属性 == 形参.属性) return true;return false;}

		―― 调用基本语法：类1 == 类2

	* 函数调用运算符重载(())【又称仿函数】
	
		―― 作用：仿函数非常灵活，作用具体而论

		―― 定义基本语法：数据类型 operator()(形参列表){代码}

		―― 调用基本语法：对象(实参列表);

	* 注意

		―― 对于内置的数据类型的表达式的运算符是不可改变的

		―― 不可滥用运算符重载

