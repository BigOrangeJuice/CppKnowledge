C++_day02
2021/10/21

1.初始化列表

	* 基本语法：构造函数():属性1(值1),属性2(值2)...{}

	* 灵活版语法：构造函数(形参1,形参2,...):属性1(形参1),属性2(形参2)...{}

2.静态成员【注意：静态成员也具有访问权限】

	* 静态成员变量

		―― 定义：通过static修饰的成员变量

		―― 基本语法

			* 类内声明：static 数据类型 变量名 ;

			* 类外初始化：数据类型 类名::变量名 = 数据 ;

				―― 注意：

					* 如果不说明数据类型，会报错【此声明没有存储类或类型说明符】

					* 当然，该变量必须在所有函数外定义，因为其要在一开始的编译阶段创建成功，如果是在函数内(例如main)初始化，会报错【当前范围内无法定义】

		―― 访问方式

			* 通过对象访问【跟普通的对象.属性一样】

			* 通过类名访问【基本语法：类名::属性】

		―― 特点

			* 所有对象共享同一份数据【因此，某A对象修改一次，某B对象将延续修改后的数值】

			* 在编译阶段分配内存(全局区)

			* 类内声明，类外初始化

	* 静态成员函数

		―― 定义：通过static修饰的成员函数

		―― 基本语法：static 数据类型 函数名(){}

		―― 访问方式

			* 通过对象访问【跟普通的对象.函数()一样】

			* 通过类名访问【基本语法：类名::函数()】

		―― 特点

			* 所有对象共享同一个函数

			* 静态成员函数只能访问静态成员变量

3.成员存储位置

	* 类的内存占用

		―― 空对象：只是单单创建了一个对象【里面不含任何成员】，编译器会自动分配一字节的内存空间

		―― 非空对象：根据成员数据类型及个数分配对应的字节内存空间

	* 成员存储

		―― 非静态成员变量	属于类的对象

		―― 静态成员变量		不属于类的对象

		―― 非静态成员函数	不属于类的对象

		―― 静态成员函数		不属于类的对象

4.this指针

	* this指针指向被调用的成员函数所属的对象

	* 作用

		―― 避免重名

		―― 在类的非静态成员函数中返回对象本身，通过return *this;【返回值最好设定成引用，避免创建副本】

	* 本质：指针常量【指向不可修改，数值可以修改】

5.指针常量和常量指针

	* 指针常量

		―― 基本语法：数据类型 * const 指针名;

		―― 理解：const在指针名前加以修饰，因此指针被固定，而指针具有指向功能，因此指向不可再修改，但指针指向的地址内的数据仍可修改

	* 常量指针

		―― 基本语法：数据类型 const * 指针名;

		―― 理解：const在解引用前加以修饰，因此指针指向的数值被固定，而指针的指向仍可改变

6.空指针访问成员

	* 创建一个类指针，但让其指向NULL，然后通过其去调用成员属性或含成员属性的成员函数，会使程序出现意外错误

	* 解决
	
		―― 添加if检测：if(this == NULL)	return;

	* 实践

		―― 用空指针对象给属性赋值，再去打印属性时没有结果